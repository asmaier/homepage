<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>softwareentwicklung | Das Blog</title>
    <link>/tag/softwareentwicklung/</link>
      <atom:link href="/tag/softwareentwicklung/index.xml" rel="self" type="application/rss+xml" />
    <description>softwareentwicklung</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>de-DE</language><lastBuildDate>Sun, 23 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>softwareentwicklung</title>
      <link>/tag/softwareentwicklung/</link>
    </image>
    
    <item>
      <title>&#34;Wir haben schon mehrere Züge ...</title>
      <link>/post/2020-08-23-wir-haben-schon-mehrere-zuge/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-08-23-wir-haben-schon-mehrere-zuge/</guid>
      <description>&lt;p&gt;&amp;ldquo;Wir haben schon mehrere Züge völlig ohne Not abfahren lassen. Wenn wir jetzt nicht aufspringen, ist auch der letzte Zug abgefahren, und Europa wird in Zukunft keine Rolle mehr spielen außer als Markt für Produkte aus dem Ausland. Das Ende von Verbrennungsmotoren ist seit Jahren absehbar. Das Ende von Chips und Webbrowsern nicht. Wir sollten auch entsprechend investieren.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Diesem Fazit aus dem Artikel von Fefe (&lt;a href=&#34;https://blog.fefe.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.fefe.de/&lt;/a&gt;)  kann ich mich nur anschließen. Wir blasen veralteten Technologien wie Braunkohle und Verbrennungsmotoren Milliardensubventionen in den Allerwertesten und Zukunftstechnologien wie Solarkraft oder Software lassen wir völlig unbeachtet. Wo bleiben Betriebssysteme, Webbrowser, Cloud, CPUs, Smartphones etc. aus Europa? Für wenig Geld könnte der Staat verschiedenste systemrelevante OpenSource-Projekte unterstützen und dadurch die digitale Souveränität der EU gegenüber USA, China und Taiwan wesentlich erhöhen.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;blog.fefe.de&lt;/p&gt;
&lt;h2 id=&#34;fefes-bloghttpsblogfefede&#34;&gt;&lt;a href=&#34;https://blog.fefe.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fefes Blog&lt;/a&gt;&lt;/h2&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Ein TEDx Talk des Digitalministers ...</title>
      <link>/post/2020-08-02-ein-tedx-talk-des-digitalministers/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-08-02-ein-tedx-talk-des-digitalministers/</guid>
      <description>&lt;p&gt;Ein TEDx Talk des Digitalministers von Taiwan. Er zeigt u.a. am Beispiel der Software &lt;a href=&#34;https://pol.is&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pol.is&lt;/a&gt; wie digitale Technologien unsere Demokratie verbessern können, indem sie Mitspracherechte für jedermann schaffen können. Solche visionären Ideen sind es, die ich von einem Digitalminister erwarte. Unser europäischer Digitalminister Günther Oettinger und die deutsche Digitalministerin Dorothee Bär dagegen sind ein schlechter Witz. Die zwei machen eher den Eindruck, als ob sie die Bedienung eines Toasters überfordern würde. Daher schaut lieber mal den TEDx-Talk von Audrey Tang an. Das gibt einem den Glauben an eine positive Zukunft zurück.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ted.com&lt;/p&gt;
&lt;h2 id=&#34;update-browserhttpswwwtedcomtalksaudrey_tang_digital_social_innovation_to_empower_democracy&#34;&gt;&lt;a href=&#34;https://www.ted.com/talks/audrey_tang_digital_social_innovation_to_empower_democracy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Browser&lt;/a&gt;&lt;/h2&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Dies ist ein sehr interessanter ...</title>
      <link>/post/2020-07-03-dies-ist-ein-sehr-interessanter/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-07-03-dies-ist-ein-sehr-interessanter/</guid>
      <description>&lt;p&gt;Dies ist ein sehr interessanter Podcast über die Entwicklung der Corona-Warn-App mit zwei der beteiligten Entwickler mit vielen interessanten Hintergrundinformationen. Aber insgesamt finde ich ja das Überraschendste ist, dass zwei Großkonzerne wie Telekom und SAP es tatsächlich geschafft haben in 7 Wochen zusammen ein erfolgreiches Projekt durchzuführen. Offenbar ist die deutsche IT doch nicht so schlecht wie ihr Ruf.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://ukw.fm/ukw030-die-corona-warn-app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://media.metaebene.me/media/ukw/episodes/ukw030-corona-warn-app.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;
ukw.fm&lt;/p&gt;
&lt;h2 id=&#34;ukw030-die-corona-warn-apphttpsukwfmukw030-die-corona-warn-app&#34;&gt;&lt;a href=&#34;https://ukw.fm/ukw030-die-corona-warn-app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UKW030 Die Corona-Warn-App&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Entwicklung und Funktion der deutschen Lösung zur Unterstützung der Kontaktverfolgung
&amp;ldquo;Die App&amp;rdquo; ist jetzt verfügbar: die &amp;ldquo;Corona Warn-App&amp;rdquo; (CWA) ist veröffentlicht, außerdem in aller Munde und vielleicht auch schon bald auf vielen Telefonen. Auf dem Weg dahin gab es ein paar außergewöhnliche Wendungen in der öffentlichen Debatte und wie Software im Rahmen eines öffentlichen Projektes entwickelt wird.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ich spreche mit Malte Janduda und Thomas Klingbeil, beide Entwickler bei SAP und Teil des CWA-Teams, über ihre das Zustandekommen und Funktion des Systems, welche Funktionen die App erfüllt und welche nicht, welche grundsätzlichen Entscheidungen beim Design getroffen wurden und was die Rolle von Google und Apple in dem ganzen Prozess war.&lt;/p&gt;
&lt;p&gt;Wir reden darüberhinaus über die Bedeutung von Open Source im Entwicklungsprozess und seine mögliche Bedeutung in der Zukunft für die Gestaltung öffentlicher Projekte.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ich lästere ja gerne, dass ...</title>
      <link>/post/2019-06-18-ich-lastere-ja-gerne-dass/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-06-18-ich-lastere-ja-gerne-dass/</guid>
      <description>&lt;p&gt;Ich lästere ja gerne, dass die Startups in Berlin nix können außer Pizza und Klamotten liefern. Hier habe ich aber mal ein interessanteres gefunden:
&lt;a href=&#34;https://ptscientists.com/about/history/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://ptscientists.com/about/history/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Die machen tatsächlich &amp;ldquo;Rocket science&amp;rdquo; im wahrsten Sinne des Wortes. Ihre Software für die Satelliten entwickeln sie auf dem &lt;a href=&#34;https://de.wikipedia.org/wiki/Rodos_%28Betriebssystem%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://de.wikipedia.org/wiki/Rodos_(Betriebssystem)&lt;/a&gt;
Das ist von der Uni Würzburg, und da kommen ja bekanntlich nur kompetente Menschen her, dass muss also gut sein.&lt;/p&gt;
&lt;p&gt;Allerdings habe ich gerade in ihre Timeline geschaut. Und da steht tatsächlich, dass sie stolz sind 2018 den Cloud Edge Moonlight shoe designed zu haben. Ist also doch nur eines der üblichen Berliner Startups ;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://ptscientists.com/about/history/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://ptscientists.com/about/history/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Einen Chatbot brauchen wir. Mit ...</title>
      <link>/post/2018-08-26-einen-chatbot-brauchen-wir-mit/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      <guid>/post/2018-08-26-einen-chatbot-brauchen-wir-mit/</guid>
      <description>&lt;p&gt;Einen Chatbot brauchen wir. Mit künstlicher Intelligenz, das hat jetzt jeder, haben sie auf der Konferenz gesagt. Dann muss es stimmen. Lass uns einen Chatbot bauen. Wie? Unsere IT Experten sagen, dass ist extrem aufwendig und kostet viel Geld? Dann kaufen wir ihn einfach extern bei Startup XY ein. Das wird super!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Die Geburtsstunde der Softwareindustrie: &#34;Die ...</title>
      <link>/post/2017-03-09-die-geburtsstunde-der-softwareindustrie-die/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      <guid>/post/2017-03-09-die-geburtsstunde-der-softwareindustrie-die/</guid>
      <description>&lt;p&gt;Die Geburtsstunde der Softwareindustrie:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Die richtige Voreinstellung der Schalter und Kabelverbindungen erfordert natürlich Erfahrung und bedeutend mehr Zeit als die automatische Arbeit der Maschine.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Wundt (1947): ENIAC, eine elektrische Rechenmaschine&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://onlinelibrary.wiley.com/doi/10.1002/phbl.19470030305/abstract&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://onlinelibrary.wiley.com/doi/10.1002/phbl.19470030305/abstract&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://onlinelibrary.wiley.com/doi/10.1002/phbl.19470030305/abstract&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://onlinelibrary.wiley.com/doi/10.1002/phbl.19470030305/abstract&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>&#34;DeepCoder uses machine learning to ...</title>
      <link>/post/2017-02-28-deepcoder-uses-machine-learning-to/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      <guid>/post/2017-02-28-deepcoder-uses-machine-learning-to/</guid>
      <description>&lt;p&gt;&amp;ldquo;DeepCoder uses machine learning to scour databases of source code and sort the fragments according to its view of their probable usefulness. All this makes the system much faster than its predecessors. DeepCoder created working programs in fractions of a second&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.newscientist.com/article/mg23331144-500-ai-learns-to-write-its-own-code-by-stealing-from-other-programs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://images.newscientist.com/wp-content/uploads/2017/02/22180000/ff3ywn-1.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;
newscientist.com&lt;/p&gt;
&lt;h2 id=&#34;ai-learns-to-write-its-own-code-by-stealing-from-other-programshttpswwwnewscientistcomarticlemg23331144-500-ai-learns-to-write-its-own-code-by-stealing-from-other-programs&#34;&gt;&lt;a href=&#34;https://www.newscientist.com/article/mg23331144-500-ai-learns-to-write-its-own-code-by-stealing-from-other-programs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AI learns to write its own code by stealing from other programs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software called DeepCoder has solved simple programming challenges by piecing together bits of borrowed code&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Apple bringt Steve Jobs 2 ...</title>
      <link>/post/2011-10-19-apple-bringt-steve-jobs-2/</link>
      <pubDate>Wed, 19 Oct 2011 00:00:00 +0000</pubDate>
      <guid>/post/2011-10-19-apple-bringt-steve-jobs-2/</guid>
      <description>&lt;p&gt;Apple bringt Steve Jobs 2 heraus! Mit mehr Haaren, besserer Kleidung und erhöhter Touch-Sensivity ;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ifc.com/videos/onion-news-network-apple-announces-plans-to-release-steve-jobs-2.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.ifc.com/videos/onion-news-network-apple-announces-plans-to-release-steve-jobs-2.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Opensource ist gut, denn...</title>
      <link>/post/2006-10-15-opensource-ist-gut-denn/</link>
      <pubDate>Sun, 15 Oct 2006 18:17:00 +0000</pubDate>
      <guid>/post/2006-10-15-opensource-ist-gut-denn/</guid>
      <description>
...dann kann jeder (mit &lt;a href=&#34;http://www.google.com/codesearch&#34;&gt;Googles CodeSearch&lt;/a&gt;) herausfinden in welcher Programmiersprache am meisten geflucht wird:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://predius.org/blog/2006/10/05/fucks-per-source-package-and-license/&#34;&gt;Fucks per programming language&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; Oder andere schräge Kommentare finden:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://www.webthreads.de/2006/10/google-code-search-oder-wie-finde-ich-lustige-kommentare/&#34;&gt;Wie finde ich lustige Kommentare&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;Oder einfach nur Sicherheitslücken in fremder Software finden:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://www.cipher.org.uk/index.php?p=projects/bugle.project&#34;&gt;Bugle - Google Source Code Bug Finder&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Handschrifterkennung mathematischer Formeln</title>
      <link>/post/2006-08-24-handschrifterkennung-mathematischer/</link>
      <pubDate>Thu, 24 Aug 2006 20:36:00 +0000</pubDate>
      <guid>/post/2006-08-24-handschrifterkennung-mathematischer/</guid>
      <description>
Jeder der viele mathematische Formeln in den Computer eingeben muss weiß das es eine echte Qual ist. Mit der Maus ist es in allen Formeleditoren ein mühseliges Geklicke, und über die Tastatur ist es selbst mit der raffinierten Syntax von Latex noch sehr mühsam. Wäre es nicht genial, wenn man mathematische Formeln direkt handschriftlich, z.B. über ein &lt;a href=&#34;http://de.wikipedia.org/wiki/Digitizer&#34;&gt;Grafiktablett&lt;/a&gt; eingeben könnte und diese würden vom Computer automatisch erkannt und in Latex für den perfekten Ausdruck umgewandelt? Geht nicht, gibts nicht? Dachte ich auch, bis ich vom &lt;a href=&#34;http://www.inftyproject.org/en/&#34;&gt;Infty Project&lt;/a&gt; gehört habe. Im Rahmen des Infty Project versucht ein Zusammenschluss vieler japanischer Universitäten die Probleme der automatisierten Erkennung gedruckter und handschriftlicher mathematischer Formeln zu lösen. Und der vom Infty Project entwickelte &lt;a href=&#34;http://www.inftyproject.org/en/software.html#InftyEditor&#34;&gt;Infty Editor&lt;/a&gt; mit eingebauter Handschrifterkennung ist sogar kostenlos erhältlich. Begeistert habe ich ihn in der Version 2.0 getestet. Leider mit ernüchterndem Ergebnis. Die Handschrifterkennung des Infty Editors ist leider kaum brauchbar. Zwar konnte ich die Formeln nur über die Maus eingeben, aber selbst mit dem besten Grafiktablett dürfte die Erkennungsrate immer noch miserabel sein. Schade, also geht doch (noch) nicht. Aber es gibt noch andere Projekte, die zwar nicht unbedingt die direkte Wandlung in Latex versprechen, aber doch die Eingabe mathematischer oder auch chemischer Formeln erleichtern wollen. Eine gute Übersicht dazu gibt es im &lt;a href=&#34;http://www.physicsforums.com/blog.php?b=103&#34;&gt;Physics Blog&lt;/a&gt;.</description>
    </item>
    
    <item>
      <title>Archivieren</title>
      <link>/post/archivieren/</link>
      <pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate>
      <guid>/post/archivieren/</guid>
      <description>&lt;p&gt;Eine gute Einführung übers Archivieren und Komprimieren gibts in bei
&lt;a href=&#34;http://www.oreilly.de/german/freebooks/rlinux3ger/ch072.html&#34;&gt;
Welsh et al. 2000&lt;/a&gt;.
Ich beschränke mich daher im weiteren auf ein paar eigene Bemerkungen.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;tt&gt;*.gz&lt;/tt&gt;-Dateien entpacken:&lt;/em&gt;
&lt;pre&gt;&gt; gunzip dateiname.gz&lt;/pre&gt;
Achtung: &lt;tt&gt;gunzip&lt;/tt&gt; ersetzt die gepackte Datei (dateiname.gz)
mit der ungepackten Version (dateiname). 
Achtung2: &lt;tt&gt;gunzip&lt;/tt&gt; ist ungeeignet um &lt;tt&gt;*.zip&lt;/tt&gt;-Dateien
zu entpacken. &lt;tt&gt;gunzip&lt;/tt&gt; unterstützt nur &lt;tt&gt;*.zip&lt;/tt&gt;-Archive,
die aus genau einer Datei bestehen (siehe auch &lt;tt&gt;man gunzip&lt;/tt&gt;).
Zum Entpacken von &lt;tt&gt;*.zip&lt;/tt&gt;-Archiven die aus mehrerer Dateien bestehen
(was praktisch immer der Fall ist) muß man &lt;tt&gt;unzip&lt;/tt&gt; verwenden.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;tt&gt;*.zip&lt;/tt&gt;-Dateien entpacken:&lt;/em&gt;
&lt;pre&gt;&gt; unzip dateiname.zip&lt;/pre&gt;
Dabei werden alle Dateien und Verzeichnisse ins aktuelle Verzeichnis entpackt.
Um Chaos zu vermeiden empfiehlt es sich daher vor dem Entpacken ein neues
Verzeichnis &lt;tt&gt;dateiname&lt;/tt&gt; anzulegen, die Datei &lt;tt&gt;dateiname.zip&lt;/tt&gt;
in dieses zu verschieben und dort erst zu entpacken. Das gleiche Vorgehen
empfiehlt sich natürlich auch für &lt;tt&gt;*.tar&lt;/tt&gt;-Archive.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;tt&gt;*.tar.gz&lt;/tt&gt;-Dateien entpacken:&lt;/em&gt;
&lt;pre&gt;&gt; tar zxvf dateiname.tar.gz&lt;/pre&gt;
Die obige Schreibweise entspricht der sogennanten BSD-Unix-Schreibweise.
&lt;tt&gt;tar&lt;/tt&gt; unterstützt auch die Standart-Schreibweise. Mit dieser
würde die obige Befehlszeile folgendermaßen aussehen:
&lt;pre&gt;&gt; tar -z -x -v -f dateiname.tar.gz&lt;/pre&gt; 
Zu beachten ist, dass die Option &lt;tt&gt;-f&lt;/tt&gt; stets die letzte ist, da diese
den zu entpackenden Dateinamen angibt und daher dieser direkt im Anschluß
an die Option &lt;tt&gt;-f&lt;/tt&gt; stehen muß. Die weiteren Optionen sind:
&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;-v&lt;/tt&gt; (verbose): Damit gibt &lt;tt&gt;tar&lt;/tt&gt; Informationen über den
Entpackprozess an. Kann auch mehrfach angegeben werden, dann gibt &lt;tt&gt;tar&lt;/tt&gt;
immer mehr Informationen an.&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;-x&lt;/tt&gt; (extract): Sagt nur, dass die Datei hinter &lt;tt&gt;-f&lt;/tt&gt; entpackt 
bzw. dearchiviert werden soll.&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;-z&lt;/tt&gt;: Gibt an, dass die Datei hinter &lt;tt&gt;-f&lt;/tt&gt; zunächst mit
&lt;tt&gt;gunzip&lt;/tt&gt; entpackt und dann erst weiter mit &lt;tt&gt;tar&lt;/tt&gt; dearchiviert werden 
soll. Dies erspart den Extraaufruf von &lt;tt&gt;gunzip&lt;/tt&gt; zum Entpacken der 
&lt;tt&gt;*.tar.gz&lt;/tt&gt;-Datei. Statt &lt;tt&gt;-x&lt;/tt&gt; kann man hier übrigens auch andere Optionen
und damit andere Packprogramme verwenden. Verwendet man &lt;tt&gt;-X&lt;/tt&gt; wird 
&lt;tt&gt;uncompress&lt;/tt&gt; (für &lt;tt&gt;*.tar.z&lt;/tt&gt;-Dateien) aufgerufen, verwendet man &lt;tt&gt;-j&lt;/tt&gt;
wird &lt;tt&gt;bunzip2&lt;/tt&gt; (für &lt;tt&gt;*.tar.bz2&lt;/tt&gt;-Dateien) benutzt.&lt;/li&gt;
&lt;/ul&gt;
Hinweis: Auf FAT32-Filesystemen ist zusätzlich die 
Option &lt;tt&gt;-m&lt;/tt&gt; anzugeben, welche das Entpacken der Dateimodifikationszeit
verhindert, da es ansonsten beim Entpacken zu Fehlermeldungen kommt.
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;tt&gt;*.tar.gz&lt;/tt&gt;-Dateien packen:&lt;/em&gt;
&lt;pre&gt;&gt; tar zcvf verzeichnis.tar.gz verzeichnis&lt;/pre&gt;
Zu Beachten ist hier, dass 
(im Gegensatz zu anderen Kommandos wie z.B. &lt;tt&gt;cp&lt;/tt&gt; oder &lt;tt&gt;scp&lt;/tt&gt;)
die zu erzeugende Datei (das Ziel) zuerst angegeben
werden muß und dann erst das zu archivierende Verzeichnis (die Quelle).
Die Optionen dazu sind die gleichen wie oben beschrieben, nur steht nun
&lt;tt&gt;-c&lt;/tt&gt; dafür, dass &lt;tt&gt;tar&lt;/tt&gt; jetzt archivieren soll und &lt;tt&gt;-z&lt;/tt&gt;
steht dafür, dass nach der Archivierung durch &lt;tt&gt;tar&lt;/tt&gt; das Archiv noch
mittels &lt;tt&gt;gzip&lt;/tt&gt; komprimiert werden soll. 
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;tt&gt;*.tar.gz&lt;/tt&gt;-Dateien erzeugen, wobei versteckte Verzeichnisse von Subversion (&lt;tt&gt;.svn&lt;/tt&gt;) ausgeschlossen werden:&lt;/em&gt;
&lt;pre&gt;&gt; tar --exclude=&#39;.svn&#39; -zcvf verzeichnis.tar.gz verzeichnis&lt;/pre&gt;
oder in neueren &lt;tt&gt;tar&lt;/tt&gt; Versionen auch mit
&lt;pre&gt;&gt; tar --exclude-vcs -zcvf verzeichnis.tar.gz verzeichnis&lt;/pre&gt;
Siehe auch 
&lt;a href=&#34;http://www.linuxquestions.org/questions/linux-software-2/copy-svn-working-dir-without-svn-hidden-dirs-and-files-620586/&#34;&gt;
http://www.linuxquestions.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Entpackprozess beobachten:&lt;/em&gt;&lt;br /&gt;
Hat man beim Aufruf des Entpackprogramms die Verbose-Option vergessen und man möchte
trotzdem wissen, ob der Entpackprozess vorangeht, kann man dies mit Hilfe von
&lt;tt&gt;watch&lt;/tt&gt; erreichen. Hat man z.B. das Entpacken mehrerer 
&lt;tt&gt;*.iso.gz&lt;/tt&gt;-Dateien mittels &lt;tt&gt;gunzip&lt;/tt&gt; gestartet, kann man mittels
&lt;pre&gt;&gt;watch ls -l *.iso&lt;/pre&gt;
sehen, wie sich die Größe der entpackten Datei (im Abstand von zwei Sekunden,
da &lt;tt&gt;watch&lt;/tt&gt; einfach alle 2 Sekunden den Befehl &lt;tt&gt;ls -l&lt;/tt&gt; ausführt)
mit der Zeit entwickelt.
Hinweis: &lt;tt&gt;watch ll *.iso&lt;/tt&gt; funktioniert nicht, da &lt;tt&gt;watch&lt;/tt&gt; 
anscheinend nicht mit Aliasen umgehen kann.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Inhalt von &lt;tt&gt;*.war&lt;/tt&gt;-Dateien anzeigen&lt;/em&gt;
&lt;pre&gt;&gt; jar -tf datei.war&lt;/pre&gt;
&lt;tt&gt;war&lt;/tt&gt;-Dateien sind übrigens keine Dateien für den 
&lt;a href=&#34;http://de.wikipedia.org/wiki/Verteidigungsfall&#34;&gt;Verteidigungsfall&lt;/a&gt; sondern
sogenannte &lt;a href=&#34;http://de.wikipedia.org/wiki/Web_Archive&#34;&gt;Web Application Archive-Dateien&lt;/a&gt;
abgeleitet von 
&lt;a href=&#34;http://de.wikipedia.org/wiki/Java_Archive&#34;&gt;Java Archive-Dateien (&lt;tt&gt;*.jar&lt;/tt&gt;)&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Dateien aufteilen (splitten) und wieder zusammenfügen&lt;/em&gt;&lt;br /&gt;
Moechte man eine sehr große Datei namens &lt;tt&gt;file&lt;/tt&gt; in Teile zu je 1GB = 1024MB aufteilen, so hilft das 
&lt;tt&gt;split&lt;/tt&gt;-Kommando:
&lt;pre&gt;&gt; split -b 1024m file file.split&lt;/pre&gt;
Um die so entstandenen Teile namens &lt;tt&gt;file.split.aa, file.split.ab, ...&lt;/tt&gt; wieder zusammenzufuegen nutzt man &lt;tt&gt;cat&lt;/tt&gt;:
&lt;pre&gt;&gt; cat file.split.* &gt; file &lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
